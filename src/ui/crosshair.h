#pragma once

#include <vulkan/vulkan.h>

#include <string>
#include <vector>
#include <stdexcept>

#include "../types.h"
#include "../util.h"

class Crosshair {
public:
	// IF ELEMENT STATE IS NULL, MAKES ITS OWN
	void init(OverlayState& state, glm::vec2 sizePixels, int texIndex);

	// returns the number of vertices (aka how much to increment pointer)
	int mapLines(UIVertex* mapped);

	void scale();

	const std::string name_ = "CROSSHAIR";

private:
	OverlayState* state_;

	// generated by init and modified with scale, etc.
	std::vector<UIVertex> vertices_ = {};

	glm::vec2 sizePixels_ = { 0.f, 0.f };
	int texIndex_ = -1;

	void initVertices();
};
