#pragma once

#include <vulkan/vulkan.h>

#include <string>
#include <vector>
#include <stdexcept>

#include "../types.h"
#include "../util.h"

class Rectangle {
public:
	// id, mode, position{topleftX, topleftY}, size{widthPixel, heightPixel}, texcoord{topleftX, topleftY, xOffset, yOffset}, texindex, extent)
	void init(const std::string& id, OverlayMode mode, glm::vec2 position, glm::vec2 sizePixels, glm::vec4 texCoords, int texIndex, VkExtent2D extent);

	// returns the number of vertices (aka how much to increment pointer)
	int map(UIVertex* mapped, int overrideIndex = -1);

	void rescale(float scale);

	void setMovable(bool state);

	// events
	void onResize(VkExtent2D extent);
	void onMouseMove(glm::vec2 mousePos);
	void onMouseButton(bool down);
	void resetInteraction();
	void needsUpdate();

	// getters for if in container
	float getWidth();
	float getHeight();

	std::string id_ = "";

	bool hovered_ = false;
	bool dragged_ = false;
	int interaction_ = 0;

	OverlayMode mode_ = OVERLAY_DEFAULT;

	const std::string name_ = "RECTANGLE";

private:
	bool updated_ = true;

	// generated by init and modified with scale, etc.
	UIQuad quad_{};

	glm::vec2 position_ = {0.f, 0.f};
	glm::vec2 sizePixels_ = { 0.f, 0.f };
	float scale_ = 1.f;

	// extent used for scaling
	VkExtent2D extent_;

	// for dragging
	bool movable_ = false;
	glm::vec2 mousePos_ = {0.f,0.f};
	void rePosition(); // maybe make public?

	// helper
	void updateInteraction();
};