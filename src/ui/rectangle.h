#pragma once

#include <vulkan/vulkan.h>

#include <string>
#include <vector>
#include <stdexcept>

#include "../types.h"
#include "../util.h"

class Rectangle {
public:
	// id, mode, position{topleftX, topleftY}, size{widthPixel, heightPixel}, texcoord{topleftX, topleftY, xOffset, yOffset}, texindex, extent)
	// IF ELEMENT STATE IS NULL, MAKES ITS OWN
	void init(OverlayState& state, OverlayElementState* elementState, const std::string& id, glm::vec2 position, glm::vec2 sizePixels, glm::vec4 texCoords, int texIndex);

	// returns the number of vertices (aka how much to increment pointer)
	int map(UIVertex* mapped, int overrideIndex = -1);

	void replaceElementState(OverlayElementState* elementState);

	// events
	void scale();
	void onMouseMove();
	void onMouseButton();
	void resetInteraction();
	void needsRemap();
	void updateInteraction();

	// getters for if in container
	glm::vec2 getDimensions();

    // getters for updating config file - REMOVE?
	glm::vec2 getPosition();

	// setter for moving in container
	void setPosition(glm::vec2 position);

	void cleanup();

	bool unique_ = false;

	std::string id_ = "";

	const std::string name_ = "RECTANGLE";

private:
	OverlayState* state_;
	OverlayElementState* elementState_;

	// generated by init and modified with scale, etc.
	UIQuad quad_{};

	glm::vec2 position_ = {0.f, 0.f};
	glm::vec2 sizePixels_ = { 0.f, 0.f };

	// helper
	void rePosition(); 
};
